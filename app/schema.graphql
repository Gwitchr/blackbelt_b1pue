scalar Upload

type  Query {
	prueba:String
	Users:[User]
	User(id:ID!):User
	Posts:[Post]
	Post(id:ID!):Post
}

type Mutation {
	createRestaurant(data: RestaurantCreateInput!):Restaurant
	signup(data:UserCreateInput!):Auth
	login(email:String!,password:String!):Auth
	updateUser(id:ID!,data:UserUpdateInput!):User
	deleteUser(id:ID!):String
	createPost(data:PostCreateInput!):Post
	updatePost(id:ID!,data:PostUpdateInput):Post
	deletePost(id:ID!):String
}

type Auth{
	token:String
	message:String
}

type Restaurant {
	_id: ID
	categorias: [String]
	nombreMarca: String
	calle:String
	numero:String
	codigoPostal:String
	colonia:String
	estado:String
	ciudad:String
	domicilio:String
	telefono: String
	nombreComercial:String
	sitioweb: String
	coordenadas:[String]
	menu: [ID]
	comentarios: [ID]
	metodo_pago: [ID]
	valoracion: Int
	es_matriz: Boolean
	email: String
	activo: Boolean
	creado_en: String
	actualizado_en: String
}

type User{
	_id:ID
	first_name:String
	last_name:String
	email:String
	birth_date:String
	gender:GENDER
	posts:[Post]
	liked:[Post]
	profile_image:String
	is_active:Boolean
}

type Post{
	_id:ID
	title:String,
	author:User,
	content:String
	category:CATEGORIES
	tags:[String]
	likes:Int
	is_active:Boolean
}

enum GENDER {
	Male
	Female
}

enum  CATEGORIES{
	TECH
	DEV
	GAME
	HEALTH
}

input RestaurantCreateInput {
	nombre_marca:String!
	calle:String!
	numero:String!
	codigo_postal:String!
	colonia:String!
	estado:String!
	ciudad:String!
	coordenadas:[String]!
	email:String!
}

input UserCreateInput {
	first_name:String!
	last_name:String!
	email:String!
	password:String!
	profile_image:Upload
}

input UserUpdateInput{
	first_name:String
	last_name:String
	email:String
	password:String
	birth_date:String
	gender:GENDER
	is_active:Boolean

}


input PostCreateInput{
	title:String!
	content:String!
	category:CATEGORIES!

}

input PostUpdateInput{
	title:String
	content:String
	category:CATEGORIES
	tags:[String]
	likes:Int
	is_active:Boolean
}
